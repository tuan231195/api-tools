// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateTypescriptTypes /v2/petstore.json 1`] = `
Object {
  "add-pet.ts": "export interface RequestBody {
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response405 = void;
",
  "create-user.ts": "export interface RequestBody {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export type Response200 = void;
",
  "create-users-with-array-input.ts": "export type RequestBody = {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}[];

export type Response200 = void;
",
  "create-users-with-list-input.ts": "export type RequestBody = {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}[];

export type Response200 = void;
",
  "delete-order.ts": "export interface Path {
	/**
	 * ID of the order that needs to be deleted
	 */
	orderId: string; // uuid
}

export type Response400 = void;

export type Response404 = void;
",
  "delete-pet.ts": "export interface Header {
	api_key?: string;
}

export interface Path {
	/**
	 * Pet id to delete
	 */
	petId: string; // uuid
}

export type Response400 = void;

export type Response404 = void;
",
  "delete-user.ts": "export interface Path {
	/**
	 * The name that needs to be deleted
	 */
	username: string;
}

export type Response400 = void;

export type Response404 = void;
",
  "find-pets-by-status.ts": "export interface Query {
	/**
	 * Status values that need to be considered for filter
	 */
	status: ('available' | 'pending' | 'sold')[];
}

export type Response200 = {
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}[];

export type Response400 = void;
",
  "find-pets-by-tags.ts": "export interface Query {
	/**
	 * Tags to filter by
	 */
	tags: string[];
}

export type Response200 = {
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}[];

export type Response400 = void;
",
  "get-inventory.ts": "export interface Response200 {
	[name: string]: number; // int32
}
",
  "get-order-by-id.ts": "export interface Path {
	/**
	 * ID of pet that needs to be fetched
	 */
	orderId: string; // uuid
}

export interface Response200 {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export type Response400 = void;

export type Response404 = void;
",
  "get-pet-by-id.ts": "export interface Path {
	/**
	 * ID of pet to return
	 */
	petId: string; // uuid
}

export interface Response200 {
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response400 = void;

export type Response404 = void;
",
  "get-user-by-name.ts": "export interface Path {
	/**
	 * The name that needs to be fetched. Use user1 for testing.
	 */
	username: string;
}

export interface Response200 {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export type Response400 = void;

export type Response404 = void;
",
  "login-user.ts": "export interface Query {
	/**
	 * The user name for login
	 */
	username: string;
	/**
	 * The password for login in clear text
	 */
	password: string;
}

export type Response200 = string;

export type Response400 = void;
",
  "logout-user.ts": "export type Response200 = void;
",
  "place-order.ts": "export interface RequestBody {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export interface Response200 {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export type Response400 = void;
",
  "update-pet-with-form.ts": "export interface Path {
	/**
	 * ID of pet that needs to be updated
	 */
	petId: string; // uuid
}

export interface RequestBody {
	/**
	 * Updated name of the pet
	 */
	name?: string;
	/**
	 * Updated status of the pet
	 */
	status?: string;
}

export type Response405 = void;
",
  "update-pet.ts": "export interface RequestBody {
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response400 = void;

export type Response404 = void;

export type Response405 = void;
",
  "update-user.ts": "export interface Path {
	/**
	 * name that need to be updated
	 */
	username: string;
}

export interface RequestBody {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export type Response400 = void;

export type Response404 = void;
",
  "upload-file.ts": "export interface Path {
	/**
	 * ID of pet to update
	 */
	petId: string; // uuid
}

export interface RequestBody {
	/**
	 * Additional data to pass to server
	 */
	additionalMetadata?: string;
	/**
	 * file to upload
	 */
	file?: unknown;
}

export interface Response200 {
	code?: number; // int32
	type?: string;
	message?: string;
}
",
}
`;

exports[`generateTypescriptTypes /v3/petstore.json 1`] = `
Object {
  "add-pet.ts": "export interface RequestBody {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export interface Response200 {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response405 = void;
",
  "create-user.ts": "export interface RequestBody {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export interface Response200 {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}
",
  "create-users-with-array-input.ts": "export type RequestBody = {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}[];

export type Response200 = void;
",
  "create-users-with-list-input.ts": "export type RequestBody = {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}[];

export type Response200 = void;
",
  "delete-order.ts": "export interface Path {
	orderId: string; // uuid
}

export type Response400 = void;

export type Response404 = void;
",
  "delete-pet.ts": "export interface Header {
	api_key?: string;
}

export interface Path {
	petId: string; // uuid
}

export type Response400 = void;
",
  "delete-user.ts": "export interface Path {
	username: string;
}

export type Response400 = void;

export type Response404 = void;
",
  "find-pets-by-status.ts": "export interface Query {
	status?: 'available' | 'pending' | 'sold';
}

export type Response200 = {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}[];

export type Response400 = void;
",
  "find-pets-by-tags.ts": "export interface Query {
	tags?: string[];
}

export type Response200 = {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}[];

export type Response400 = void;
",
  "get-inventory.ts": "export interface Response200 {
	[name: string]: number; // int32
}
",
  "get-order-by-id.ts": "export interface Path {
	orderId: string; // uuid
}

export interface Response200 {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export type Response400 = void;

export type Response404 = void;
",
  "get-pet-by-id.ts": "export interface Path {
	petId: string; // uuid
}

export interface Response200 {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response400 = void;

export type Response404 = void;
",
  "get-user-by-name.ts": "export interface Path {
	username: string;
}

export interface Response200 {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export type Response400 = void;

export type Response404 = void;
",
  "login-user.ts": "export interface Query {
	username?: string;
	password?: string;
}

export type Response200 = string;

export type Response400 = void;
",
  "logout-user.ts": "export type Response200 = void;
",
  "place-order.ts": "export interface RequestBody {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export interface Response200 {
	id?: string; // uuid
	petId?: string; // uuid
	quantity?: number; // int32
	shipDate?: string; // date-time
	/**
	 * Order Status
	 * example:
	 * approved
	 */
	status?: 'placed' | 'approved' | 'delivered';
	complete?: boolean;
}

export type Response405 = void;
",
  "update-pet-with-form.ts": "export interface Path {
	petId: string; // uuid
}

export interface Query {
	name?: string;
	status?: string;
}

export type Response405 = void;
",
  "update-pet.ts": "export interface RequestBody {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export interface Response200 {
	/**
	 * example:
	 * 10
	 */
	id?: string; // uuid
	/**
	 * example:
	 * doggie
	 */
	name: string;
	category?: {
		id?: string; // uuid
		name?: string;
	};
	photoUrls: string /* uri */[];
	tags?: {
		id?: string; // uuid
		name?: string;
	}[];
	/**
	 * pet status in the store
	 */
	status?: 'available' | 'pending' | 'sold';
}

export type Response400 = void;

export type Response404 = void;

export type Response405 = void;
",
  "update-user.ts": "export interface Path {
	username: string;
}

export interface RequestBody {
	id: string; // uuid
	/**
	 * example:
	 * theUser
	 */
	username: string;
	/**
	 * example:
	 * John
	 */
	firstName: string;
	/**
	 * example:
	 * James
	 */
	lastName: string;
	/**
	 * example:
	 * john@email.com
	 */
	email?: string;
	/**
	 * example:
	 * 12345
	 */
	password: string;
	/**
	 * example:
	 * 12345
	 */
	phone?: string;
	/**
	 * User Status
	 */
	userStatus?: boolean;
}

export interface Response200 {
	id: string; // uuid
}
",
  "upload-file.ts": "export interface Path {
	petId: string; // uuid
}

export interface Query {
	additionalMetadata?: string;
}

export interface Response200 {
	code?: number; // int32
	type?: string;
	message?: string;
}
",
}
`;
