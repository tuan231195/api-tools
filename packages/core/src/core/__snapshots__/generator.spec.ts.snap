// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate /v2/petstore.json 1`] = `
Object {
  "addPet": "declare interface RequestBody {
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response405 = void;
",
  "createUser": "declare interface RequestBody {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare type Response200 = void;
",
  "createUsersWithArrayInput": "declare type RequestBody = {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}[];
declare type Response200 = void;
",
  "createUsersWithListInput": "declare type RequestBody = {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}[];
declare type Response200 = void;
",
  "deleteOrder": "declare interface Path {
    /**
     * ID of the order that needs to be deleted
     */
    orderId: string; // uuid
}
declare type Response400 = void;
declare type Response404 = void;
",
  "deletePet": "declare interface Header {
    api_key?: string;
}
declare interface Path {
    /**
     * Pet id to delete
     */
    petId: string; // uuid
}
declare type Response400 = void;
declare type Response404 = void;
",
  "deleteUser": "declare interface Path {
    /**
     * The name that needs to be deleted
     */
    username: string;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "findPetsByStatus": "declare interface Query {
    /**
     * Status values that need to be considered for filter
     */
    status: (\\"available\\" | \\"pending\\" | \\"sold\\")[];
}
declare type Response200 = {
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}[];
declare type Response400 = void;
",
  "findPetsByTags": "declare interface Query {
    /**
     * Tags to filter by
     */
    tags: string[];
}
declare type Response200 = {
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}[];
declare type Response400 = void;
",
  "getInventory": "declare interface Response200 {
    [name: string]: number; // int32
}
",
  "getOrderById": "declare interface Path {
    /**
     * ID of pet that needs to be fetched
     */
    orderId: string; // uuid
}
declare interface Response200 {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "getPetById": "declare interface Path {
    /**
     * ID of pet to return
     */
    petId: string; // uuid
}
declare interface Response200 {
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response400 = void;
declare type Response404 = void;
",
  "getUserByName": "declare interface Path {
    /**
     * The name that needs to be fetched. Use user1 for testing.
     */
    username: string;
}
declare interface Response200 {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "loginUser": "declare interface Query {
    /**
     * The user name for login
     */
    username: string;
    /**
     * The password for login in clear text
     */
    password: string;
}
declare type Response200 = string;
declare type Response400 = void;
",
  "logoutUser": "declare type Response200 = void;
",
  "placeOrder": "declare interface RequestBody {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare interface Response200 {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare type Response400 = void;
",
  "updatePet": "declare interface RequestBody {
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response400 = void;
declare type Response404 = void;
declare type Response405 = void;
",
  "updatePetWithForm": "declare interface Path {
    /**
     * ID of pet that needs to be updated
     */
    petId: string; // uuid
}
declare interface RequestBody {
    /**
     * Updated name of the pet
     */
    name?: string;
    /**
     * Updated status of the pet
     */
    status?: string;
}
declare type Response405 = void;
",
  "updateUser": "declare interface Path {
    /**
     * name that need to be updated
     */
    username: string;
}
declare interface RequestBody {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "uploadFile": "declare interface Path {
    /**
     * ID of pet to update
     */
    petId: string; // uuid
}
declare interface RequestBody {
    /**
     * Additional data to pass to server
     */
    additionalMetadata?: string;
    /**
     * file to upload
     */
    file?: unknown;
}
declare interface Response200 {
    code?: number; // int32
    type?: string;
    message?: string;
}
",
}
`;

exports[`generate /v3/petstore.json 1`] = `
Object {
  "addPet": "declare interface RequestBody {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare interface Response200 {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response405 = void;
",
  "createUser": "declare interface RequestBody {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare interface Response200 {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
",
  "createUsersWithListInput": "declare type RequestBody = {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}[];
declare type Response200 = void;
",
  "deleteOrder": "declare interface Path {
    orderId: string; // uuid
}
declare type Response400 = void;
declare type Response404 = void;
",
  "deletePet": "declare interface Header {
    api_key?: string;
}
declare interface Path {
    petId: string; // uuid
}
declare type Response400 = void;
",
  "deleteUser": "declare interface Path {
    username: string;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "findPetsByStatus": "declare interface Query {
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response200 = {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}[];
declare type Response400 = void;
",
  "findPetsByTags": "declare interface Query {
    tags?: string[];
}
declare type Response200 = {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}[];
declare type Response400 = void;
",
  "getInventory": "declare interface Response200 {
    [name: string]: number; // int32
}
",
  "getOrderById": "declare interface Path {
    orderId: string; // uuid
}
declare interface Response200 {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "getPetById": "declare interface Path {
    petId: string; // uri
}
declare interface Response200 {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response400 = void;
declare type Response404 = void;
",
  "getUserByName": "declare interface Path {
    username: string;
}
declare interface Response200 {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare type Response400 = void;
declare type Response404 = void;
",
  "loginUser": "declare interface Query {
    username?: string;
    password?: string;
}
declare type Response200 = string;
declare type Response400 = void;
",
  "logoutUser": "declare type Response200 = void;
",
  "placeOrder": "declare interface RequestBody {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare interface Response200 {
    id?: string; // uuid
    petId?: string; // uuid
    quantity?: number; // int32
    shipDate?: string; // date-time
    /**
     * Order Status
     * example:
     * approved
     */
    status?: \\"placed\\" | \\"approved\\" | \\"delivered\\";
    complete?: boolean;
}
declare type Response405 = void;
",
  "updatePet": "declare interface RequestBody {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare interface Response200 {
    /**
     * example:
     * 10
     */
    id?: string; // uuid
    /**
     * example:
     * doggie
     */
    name: string;
    category?: {
        id?: string; // uuid
        name?: string;
    };
    photoUrls: string /* uri */[];
    tags?: {
        id?: string; // uuid
        name?: string;
    }[];
    /**
     * pet status in the store
     */
    status?: \\"available\\" | \\"pending\\" | \\"sold\\";
}
declare type Response400 = void;
declare type Response404 = void;
declare type Response405 = void;
",
  "updatePetWithForm": "declare interface Path {
    petId: string; // uuid
}
declare interface Query {
    name?: string;
    status?: string;
}
declare type Response405 = void;
",
  "updateUser": "declare interface Path {
    username: string;
}
declare interface RequestBody {
    id: string; // uuid
    /**
     * example:
     * theUser
     */
    username: string;
    /**
     * example:
     * John
     */
    firstName: string;
    /**
     * example:
     * James
     */
    lastName: string;
    /**
     * example:
     * john@email.com
     */
    email?: string;
    /**
     * example:
     * 12345
     */
    password: string;
    /**
     * example:
     * 12345
     */
    phone?: string;
    /**
     * User Status
     */
    userStatus?: boolean;
}
declare interface Response200 {
    id: string; // uuid
}
",
  "uploadFile": "declare interface Path {
    petId: string; // uuid
}
declare interface Query {
    additionalMetadata?: string;
}
declare interface Response200 {
    code?: number; // int32
    type?: string;
    message?: string;
}
",
}
`;
